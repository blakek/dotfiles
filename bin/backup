#!/usr/bin/env bash

bold() {
	printf '\e[1m%s\e[0m' "$1"
}

isInstalled() {
	hash "$@" 2>/dev/null
}

error() {
	printf '\e[31mError: %s\e[0m\n' "$1" >&2
}

showUsage() {
	cat <<-END
		Just compress a file/folder with progress instead of looking for the right combo of flags.

		$(bold USAGE)
		  backup [options] <files ...>

		$(bold OPTIONS)
		  -g, --gzip           use GZip compression instead of the default BZip2
		  -h, --help           output usage information and exit
		  -o, --output <file>  output file name (default: <directory>.tar.bz2)
		  -V, --version        output the version number and exit

		$(bold POSITIONAL ARGUMENTS)
		  files      list of files/directories to backup

		$(bold EXAMPLES)
		  # Backup a directory with BZip2 compression
		  backup /path/to/directory

		  # Backup a directory with GZip compression
		  backup --gzip /path/to/directory
	END
}

##
# Backups up a directory with progress
##
backup() {
	local -a files
	local compressionType="bzip2"

	# Parse arguments
	for arg in "$@"; do
		case "$arg" in
			-g | --gzip)
				compressionType="gzip"
				;;

			-h | --help | help)
				showUsage
				return
				;;

			-V | --version)
				echo "1.2.0"
				return
				;;

			-*)
				printf "Error: unrecognized argument '%s'\n" "$arg" >&2
				return 1
				;;

			*) files+=("$arg") ;;
		esac
	done

	for file in "${files[@]}"; do
		if [[ ! -d $file ]]; then
			error "Could not find directory '$file'."
			continue
		fi

		directoryName="$(basename "$file")"
		directorySizeKb="$(du -sk "$file" | cut -f1)"
		directorySize="$((directorySizeKb * 1000))"
		parentDirectory="$(dirname "$file")"

		outputName="${directoryName}.tar.bz2"
		if [[ $compressionType == "gzip" ]]; then
			outputName="${directoryName}.tar.gz"
		fi

		if isInstalled pv; then
			tar -C "$parentDirectory" -cf - "$directoryName" |
				pv -s "$directorySize" |
				$compressionType >"$outputName"
		else
			echo "Note: Install pv to see live progress."
			tar -C "$parentDirectory" -cf "$compressionType" "$directoryName" >"$outputName"
		fi
	done
}

export -f backup

if [[ ${BASH_SOURCE[0]} == "${0}" ]]; then
	backup "$@"
	exit $?
fi
