#!/usr/bin/env bash

italic="\e[3m"
reset="\e[0m"

wasBranchMerged() {
	local branch="$1"
	local targetBranch="$2"

	local searchString="Merge branch '$branch' into '$targetBranch'"

	git log --oneline --merges "$targetBranch" | grep -q "$searchString"
}

listStaleBranches() {
	# merged and unmerged are passed by reference

	if [[ ${#merged[@]} == 0 ]]; then
		echo "All merged branches have been deleted"
	else
		echo -e "These ${italic}have been${reset} merged:"
		for branch in "${merged[@]}"; do
			echo "  • $branch"
		done
	fi

	echo

	echo -e "These ${italic}have been${reset} merged but auto deleting isn't set up yet:"
	git branch --merged staging | grep -v staging | grep -v main | sed 's/^/  • /'

	echo

	if [[ ${#unmerged[@]} == 0 ]]; then
		echo "Couldn't find any unmerged branches"
	else
		echo -e "These ${italic}may not have been${reset} merged:"
		for branch in "${unmerged[@]}"; do
			echo "  • $branch"
		done
	fi
}

git-stale-branches() {
	if [[ $1 == "help" || $1 == "--help" || $1 == "-h" ]]; then
		# This can be called either directly or from `git`
		echo "Usage: git-stale-branches [list|delete]"
		return 0
	elif [[ $# -gt 0 && $1 != "list" && $1 != "delete" ]]; then
		echo "Unknown action: $1"
		git-stale-branches help
		return 1
	fi

	local merged=()
	local unmerged=()

	for branch in $(git for-each-ref --format="%(refname:short)" refs/heads); do
		if wasBranchMerged "$branch" staging; then
			merged+=("$branch")
		else
			unmerged+=("$branch")
		fi
	done

	# Parse actions
	if [[ $# == '0' || $1 == "list" ]]; then
		listStaleBranches
	elif [[ $1 == "delete" ]]; then
		for branch in "${merged[@]}"; do
			echo "Deleting $branch"
			git branch -D "$branch"
		done
	fi
}

git-stale-branches "$@"
