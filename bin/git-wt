#!/usr/bin/env bash

##
# Helpers for git worktrees
##

default_path_root="${HOME}/dev"

bold() {
	format_bold='\033[1m'
	format_reset='\033[0m'
	echo -e "${format_bold}$*${format_reset}"
}

italic() {
	format_italic='\033[3m'
	format_reset='\033[0m'
	echo -e "${format_italic}$*${format_reset}"
}

error() {
	format_red='\033[0;31m'
	format_reset='\033[0m'
	echo -e "${format_red}Error: $*${format_reset}" 1>&2
}

panic() {
	error "$*"
	exit 1
}

green() {
	format_green='\033[0;32m'
	format_reset='\033[0m'
	echo -e "${format_green}$1${format_reset}"
}

success() {
	format_green='\033[0;32m'
	format_reset='\033[0m'
	echo -e "${format_green}âœ“${format_reset} $1"
}

show_usage() {
	cat <<-END
		$(italic git-wt) - Helpers for git worktrees

		$(bold USAGE)
		  $ git wt <command> [options]

		$(bold COMMANDS)
		  add: Create a new worktree for a branch
		  go: \`cd\` into the worktree for a branch
		  help: Show this help message
		  list: List all worktrees
		  remove: Remove the worktree at a specified path

		$(bold ALIAS COMMANDS)
		  a: Alias for $(italic add)
		  cd: Alias for $(italic go)
		  create: Alias for $(italic add)
		  l: Alias for $(italic list)
		  ls: Alias for $(italic list)
		  rm: Alias for $(italic remove)
	END
}

is_git_repo() {
	git rev-parse --is-inside-work-tree &> /dev/null
	return $?
}

assert_git_repo() {
	if ! is_git_repo; then
		panic "Current directory is not a git repository"
	fi
}

get_repo_name() {
	git rev-parse --show-toplevel 2> /dev/null | xargs basename
}

get_worktree_path_for_branch() {
	local branch_name="${1:?Branch name is required}"

	assert_git_repo

	local worktree_path
	worktree_path=$(git worktree list --porcelain | awk -v branch="refs/heads/${branch_name}" '
		$1 == "worktree" { path = $2 }
		$1 == "branch" && $2 == branch { print path }
	')

	echo "${worktree_path}"
}

get_default_path() {
	local branch_name="${1:?Branch name is required}"

	assert_git_repo

	local repo_name
	repo_name=$(get_repo_name)

	echo "${default_path_root}/${repo_name}__${branch_name}"
}

command_add() {
	local branch_name="${1:?Branch name is required}"
	local path="${2:-$(get_default_path "${branch_name}")}"

	if [[ "$branch_name" == "help" || "$branch_name" == "-h" || "$branch_name" == "--help" ]]; then
		help_add
		return 0
	fi

	assert_git_repo

	git fetch origin "${branch_name}" || panic "Failed to fetch branch '${branch_name}' from origin"
	git worktree add -B "${branch_name}" "${path}" "origin/${branch_name}" || panic "Failed to create worktree for branch '${branch_name}' at path '${path}'"
	success "${path} -> origin/${branch_name}"
}

help_add() {
	local default_path

	if is_git_repo; then
		default_path=$(get_default_path "<branch>")
	else
		default_path="${default_path_root}/<repository-name>__<branch>"
	fi

	cat <<-END
		$(italic git wt add) - Create a new worktree for a branch

		$(bold USAGE)
		  $ git wt add <branch> [path]

		$(bold ARGUMENTS)
		  branch: The name of the branch to create the worktree for
		  path: The path to create the worktree at (optional)
		        Default: ${default_path}
	END
}

command_go() {
	local branch_name="${1:?Branch name is required}"

	if [[ "$branch_name" == "help" || "$branch_name" == "-h" || "$branch_name" == "--help" ]]; then
		help_go
		return 0
	fi

	assert_git_repo

	local worktree_path
	worktree_path=$(get_worktree_path_for_branch "${branch_name}")

	if [[ -z "${worktree_path}" ]]; then
		panic "No worktree found for branch '${branch_name}'"
	fi

	echo "Changing directory to worktree for branch '${branch_name}':"
	green "${worktree_path}"
	cd "${worktree_path}" || panic "Failed to change directory to '${worktree_path}'"
}

help_go() {
	cat <<-END
		$(italic git wt go) - Change directory to the worktree for a branch

		$(bold USAGE)
		  $ git wt go <branch>

		$(bold ARGUMENTS)
		  branch: The name of the branch to go to
	END
}

command_list() {
	assert_git_repo

	git worktree list
}

help_list() {
	cat <<-END
		$(italic git wt list) - List all worktrees

		$(bold USAGE)
		  $ git wt list
	END
}

command_remove() {
	local path="$1"

	if [[ "$path" == "help" || "$path" == "-h" || "$path" == "--help" ]]; then
		help_remove
		return 0
	fi

	assert_git_repo

	# Allow defaulting to the current worktree if no path is provided
	if [[ -z "$path" ]]; then
		path="$(get_repo_name)"
	fi

	git worktree remove "${path}" || panic "Failed to remove worktree at path '${path}'"
	# Prune stale metadata after removing worktree
	git worktree prune
	echo "Worktree at path '${path}' removed"
}

help_remove() {
	cat <<-END
		$(italic git wt remove) - Remove a worktree

		$(bold USAGE)
		  $ git wt remove [path]

		$(bold ARGUMENTS)
		  path: The path to the worktree to remove. If not specified, the current worktree will be removed.
	END
}

command_help() {
	local topic="${1:-}"
	case "${topic}" in
		add|a|create)
			help_add
			;;
		go)
			help_go
			;;
		list|ls|l)
			help_list
			;;
		remove|rm)
			help_remove
			;;
		"")
			show_usage
			;;
		*)
			error "Unknown help topic: '${topic}'"
			show_usage
			exit 1
			;;
	esac
}

main() {
	local command="${1:-help}"
	shift || true

	case "${command}" in
		add|a|create)
			command_add "$@"
			;;
		go)
			command_go "$@"
			;;
		list|ls|l)
			command_list "$@"
			;;
		remove|rm)
			command_remove "$@"
			;;
		help)
			command_help "$@"
			;;
		-h|--help)
			show_usage
			;;
		*)
			error "Unknown command: '${command}'"
			show_usage
			exit 1
			;;
	esac
}

main "$@"
